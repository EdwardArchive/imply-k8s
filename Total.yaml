Description: "Root Stack Infra - Start"
Parameters:

  NameRole:
    Type: String
    Default: mzc-test-web
  
  Region:
    Type: String
    Default: ap-northeast-2

  VPCCIDR:
    Type: String
    Description: The CIDR block for the VPC.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/24
      
  Allowsourceip:
    Type: String
    Default: 211.176.162.124/32
    Description: SSH 접근을 하용할 사무실 IP 입니다.

  ImageId:
    Type: String
    Default: ami-09cf633fe86e51bf0

  Keypair:
    Type: AWS::EC2::KeyPair::KeyName
    Default: "None"

Rules:
  Rule01:
    Assertions:
      - Assert: !Not [ !Equals [!Ref Keypair,"None"] ]
        AssertDescription: Keypair is required

#############
## NetWork ##
#############
Resources:
  ## VPC
  PubPrivateVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      Tags :
        - Key: "Name"
          Value: !Sub "${NameRole}-vpc"

  ##Public SUBNETS     
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PubPrivateVPC
      AvailabilityZone: !Sub "${Region}a"
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt PubPrivateVPC.CidrBlock, 4, 6 ]]
      MapPublicIpOnLaunch: true
      Tags :
        - Key: "Name"
          Value: !Sub "${NameRole}-pub-2a"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PubPrivateVPC
      AvailabilityZone: !Sub "${Region}c"
      CidrBlock: !Select [ 3, !Cidr [ !GetAtt PubPrivateVPC.CidrBlock, 4, 6 ]]
      MapPublicIpOnLaunch: true
      Tags :
        - Key: "Name"
          Value: !Sub "${NameRole}-pub-2c"

  ##Private SUBNETS for web
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PubPrivateVPC
      AvailabilityZone: !Sub "${Region}a"
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt PubPrivateVPC.CidrBlock, 4, 6 ]]
      MapPublicIpOnLaunch: false
      Tags :
        - Key: "Name"
          Value: !Sub "${NameRole}-web-2a"


  ##Private SUBNETS for WAS,DB 
  PrivateSubnetDB1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PubPrivateVPC
      AvailabilityZone: !Sub "${Region}a"
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt PubPrivateVPC.CidrBlock, 4, 6 ]]
      MapPublicIpOnLaunch: false
      Tags :
        - Key: "Name"
          Value: !Sub "${NameRole}-db-2a"
        
  ##Public SUBNETS for temp
 
## INTERNET GATEWAY
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags :
        - Key: "Name"
          Value: !Sub "${NameRole}-igw"
  
  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref PubPrivateVPC
      InternetGatewayId: !Ref InternetGateway
  
  ## PUBLIC ROUTING
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref PubPrivateVPC
      Tags :
        - Key: "Name"
          Value: !Sub "${NameRole}-public-rt"
  
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  ## ELASTIC IP
  NatPublicIP:
    Type: AWS::EC2::EIP
    DependsOn: PubPrivateVPC
    Properties:
      Domain: vpc
      Tags :
        - Key: "Name"
          Value: !Sub "${NameRole}-eip"

  ## NAT GATEWAY
  NatGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: NatPublicIP
    Properties: 
      SubnetId: !Ref PublicSubnet1
      AllocationId: !GetAtt NatPublicIP.AllocationId
      Tags :
        - Key: "Name"
          Value: !Sub "${NameRole}-nat"
  
  ## PRIVATE ROUTING
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref PubPrivateVPC
      Tags :
        - Key: "Name"
          Value: !Sub "${NameRole}-private-rt"
  
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      NatGatewayId: !Ref NatGateway
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetDB1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetDB1
      RouteTableId: !Ref PrivateRouteTable

########
## SG ##
########

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "Bastion SecurityGroup"
      GroupName: !Sub "${NameRole}-bastion-sg"
      SecurityGroupIngress: 
        - IpProtocol: tcp
          CidrIp: !Ref Allowsourceip
          FromPort: 22
          ToPort: 22
          Description: "Source From Solbit"
        - IpProtocol: tcp
          CidrIp: 221.148.114.22/32
          FromPort: 22
          ToPort: 22
          Description: "Source From MZC"
      Tags: 
        - Key: "Name"
          Value: !Sub "${NameRole}-bastion-sg"
      VpcId: !Ref PubPrivateVPC

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "ALB SecurityGroup"
      GroupName: !Sub "${NameRole}-ex-alb-sg"
      SecurityGroupIngress: 
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
          Description: "443 from ANY"
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          Description: "80 from ANY"
      Tags: 
        - Key: "Name"
          Value: !Sub "${NameRole}-ex-alb-sg"
      VpcId: !Ref PubPrivateVPC

  WebEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "Web server SecurityGroup"
      GroupName: !Sub "${NameRole}-container-sg"
      SecurityGroupIngress: 
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref BastionSecurityGroup
          FromPort: 22
          ToPort: 22
          Description: "SSH from bastion"
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref ALBSecurityGroup
          FromPort: 80
          ToPort: 80
          Description: "80 from ALB"
      Tags: 
        - Key: "Name"
          Value: !Sub "${NameRole}-webec2-sg"
      VpcId: !Ref PubPrivateVPC

  WASDBEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "WAS,DB server SecurityGroup"
      GroupName: !Sub "${NameRole}-db-sg"
      SecurityGroupIngress: 
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref BastionSecurityGroup
          FromPort: 22
          ToPort: 22
          Description: "SSH from bastion"
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref BastionSecurityGroup
          FromPort: 3306
          ToPort: 3306
          Description: "DB Inbound from bastion"
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref WebEC2SecurityGroup
          FromPort: 3306
          ToPort: 3306
          Description: "DB Inbound from Web Server"
      Tags: 
        - Key: "Name"
          Value: !Sub "${NameRole}-wasdb-sg"
      VpcId: !Ref PubPrivateVPC

## EC2 ## 

  BastionEC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      InstanceType: t3.small
      KeyName: !Ref Keypair
      DisableApiTermination: False
      BlockDeviceMappings: 
      - DeviceName: "/dev/xvda"
        Ebs: 
          VolumeType: "gp3"
          DeleteOnTermination: True
          VolumeSize: 10
      SecurityGroupIds:
        - !Ref BastionSecurityGroup
      SubnetId: !Ref PublicSubnet1
      Tags: 
        - Key: "Name"
          Value: !Sub "${NameRole}-bastion"

  WebServerEC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      InstanceType: m5.xlarge
      KeyName: !Ref Keypair
      DisableApiTermination: false
      BlockDeviceMappings: 
      - DeviceName: "/dev/xvda"
        Ebs: 
          VolumeType: "gp3"
          DeleteOnTermination: True
          VolumeSize: 320
      SecurityGroupIds:
        - !Ref WebEC2SecurityGroup
      SubnetId: !Ref PrivateSubnet1
      Tags: 
        - Key: "Name"
          Value: !Sub "${NameRole}-web-server"
  
  WASDBServerEC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      InstanceType: m5.xlarge
      KeyName: !Ref Keypair
      DisableApiTermination: false
      BlockDeviceMappings: 
      - DeviceName: "/dev/xvda"
        Ebs: 
          VolumeType: "gp3"
          DeleteOnTermination: True
          VolumeSize: 1024
      SecurityGroupIds:
        - !Ref WASDBEC2SecurityGroup
      SubnetId: !Ref PrivateSubnetDB1
      Tags: 
        - Key: "Name"
          Value: !Sub "${NameRole}-wasdb-server"

## ALB ##

  WEBALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme : internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
  WEBALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WEBTargetGroup
      LoadBalancerArn: !Ref WEBALB
      Port: 80
      Protocol: HTTP
       
  WEBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      Matcher:
        HttpCode : '200'
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref PubPrivateVPC
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '300'
      Targets:
        - Id: !Ref WebServerEC2
          Port: 80  
      Tags:
        - Key: Name
          Value: WEBTargetGroup
        - Key: Port
          Value: 80

Outputs:
  ALBDefaultDomain:
    Value: !GetAtt WEBALB.DNSName
  BastionPublicIP:
    Value: !GetAtt BastionEC2.PublicIp
  WebServerPrivateIP:
    Value: !GetAtt WebServerEC2.PrivateIp
  WASDBServerPrivateIP:
    Value: !GetAtt WASDBServerEC2.PrivateIp


